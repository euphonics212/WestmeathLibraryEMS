@model WestmeathLibraryEMS.ViewModels.EventFormViewModel

@{
    ViewData["Title"] = "New";
}
<div class="section-heading-container col-9 offset-2">
    <h1 class="section-heading">New Event</h1>
</div>

<div class="col-9 offset-2 form-container">
    @using (Html.BeginForm("Create", "Events"))
    {
        <div class="row">

            <div class="col-4">

                <div class="form-group">

                    @Html.LabelFor(m => m.Event.EventName)

                    @Html.TextBoxFor(m => m.Event.EventName, new { @class = "form-control", @placeholder = "Please give the event a name" })
                    @Html.ValidationMessageFor(m => m.Event.EventName, "", new { @class = "text-danger" })
                </div>
                <div class="form-group">
                    @Html.LabelFor(m => m.Event.EventTypeId)
                    @Html.DropDownListFor(m => m.Event.EventTypeId,
                 new SelectList(Model.EventTypes,
                     "Id",
                     "TypeName"),
                 "Select the type of event", new { @class = "form-control dropdown-text custom-select" })

                    @Html.ValidationMessageFor(m => m.Event.EventTypeId, "", new { @class = "text-danger" })
                </div>
                <div class="form-group">
                    @Html.LabelFor(m => m.Event.VenueId)
                    @Html.DropDownListFor(m => m.Event.VenueId,
                 new SelectList(Model.Venues,
                     "Id",
                     "VenueName"),
                 "Select the Venue for event", new { @class = "form-control dropdown-text" })
                    @Html.ValidationMessageFor(m => m.Event.VenueId, "", new { @class = "text-danger" })
                </div>
                <div class="form-group">
                    @Html.LabelFor(m => m.Event.FacilitatorId)
                    @Html.DropDownListFor(m => m.Event.FacilitatorId,
                 new SelectList(Model.Facilitators,
                     "Id",
                     "FacilitatorType"),
                 "Select the facilitator type for event", new { @class = "form-control dropdown-text" })
                    @Html.ValidationMessageFor(m => m.Event.FacilitatorId, "", new { @class = "text-danger" })
                </div>
                <div class="form-group">
                    @Html.LabelFor(m => m.Event.Cost)
                    @Html.TextBoxFor(m => m.Event.Cost, new { @class = "form-control", @min = 0 })
                    @Html.ValidationMessageFor(m => m.Event.Cost, "", new { @class = "text-danger" })
                </div>


                <div class="form-group">
                    @Html.LabelFor(m => m.Event.MaxAttendees)
                    @Html.TextBoxFor(m => m.Event.MaxAttendees, new { @class = "form-control", @min = 0 })
                    @Html.ValidationMessageFor(m => m.Event.MaxAttendees, "", new { @class = "text-danger" })
                </div>

                <div class="form-group">
                    @Html.LabelFor(m => m.Event.TiesInWith)
                    @Html.TextBoxFor(m => m.Event.TiesInWith, new { @class = "form-control", @placeholder = " ...does the event tie in with any festival, theme, or initiative " })
                    @Html.ValidationMessageFor(m => m.Event.TiesInWith, "", new { @class = "text-danger" })
                </div>
            </div>


            <div class="col-4">



                <div class="form-group">
                    @Html.LabelFor(m => m.Event.Description)
                    @Html.TextAreaFor(m => m.Event.Description, new { @class = "form-control", @placeholder = "...please enter a description for the event" })
                    @Html.ValidationMessageFor(m => m.Event.Description, "", new { @class = "text-danger" })
                </div>
                <div class="form-group">
                    @Html.LabelFor(m => m.Event.Requirements)
                    @Html.TextAreaFor(m => m.Event.Requirements, new { @class = "form-control", @placeholder = "...please enter any special requirements" })
                    @Html.ValidationMessageFor(m => m.Event.Requirements, "", new { @class = "text-danger" })
                </div>


                <h6>Dates</h6>

                <div class="checkbox">
                    <label>

                        <input type="checkbox" id="consecDays" />
                        does the event run over consecutive days?
                    </label>
                </div>
                <br />

                <div class="form-group">
                    @Html.LabelFor(m => m.EventDay.EventDate)
                    @Html.TextBoxFor(m => m.EventDay.EventDate, new { @class = "form-control event-date", @type = "Date", @placeholder = "Select a date" })
                    @Html.ValidationMessageFor(m => m.EventDay.EventDate, "", new { @class = "text-danger" })
                </div>

                <div class="form-group" id="endDateContainer">
                    @Html.LabelFor(m => m.EventDay.EndDate)
                    @Html.TextBoxFor(m => m.EventDay.EndDate, new { @class = "form-control event-date", @type = "Date", @placeholder = "Select a date" })
                    @Html.ValidationMessageFor(m => m.EventDay.EndDate, "", new { @class = "text-danger" })
                </div>

                <div class="form-group">
                    @Html.LabelFor(m => m.EventDay.StartTime)
                    @Html.TextBoxFor(m => m.EventDay.StartTime, new { @class = "form-control", @type = "time", @value = "09:00" })
                    @Html.ValidationMessageFor(m => m.EventDay.StartTime, "", new { @class = "text-danger" })
                </div>

                <div class="form-group">
                    @Html.LabelFor(m => m.EventDay.EndTime)
                    @Html.TextBoxFor(m => m.EventDay.EndTime, new { @class = "form-control", @type = "time", @value = "19:00" })
                    @Html.ValidationMessageFor(m => m.EventDay.EndTime, "", new { @class = "text-danger" })
                </div>

                <div class="form-group" style="visibility: hidden ">
                    @Html.LabelFor(m => m.EventDay.EventStatusId)
                    <text class="input-helper">- set the status of <b>new</b> events to upcoming</text>
                    @Html.DropDownListFor(m => m.EventDay.EventStatusId,
                 new SelectList(Model.EventStatuses,
                     "Id",
                     "EventStatusName"),
                 "Select the Event Status", new { @class = "form-control dropdown-text custom-select event-status" })

                    @Html.ValidationMessageFor(m => m.EventDay.EventStatusId, "", new { @class = "text-danger" })
                </div>

            </div>

            <div class="col-4">
                <h6 style="margin-top:0px">Booked and On-line</h6>
                <div class="checkbox">
                    <label>
                        @Html.CheckBoxFor(m => m.Event.BookedEvent) does the event take bookings?
                    </label>
                </div>

                <div class="checkbox">
                    <label>
                        @Html.CheckBoxFor(m => m.Event.OnlineEvent) is the event on-line <i> - either fully or partially</i>?
                    </label>
                </div>
                <br />
                <div class="form-group">
                    @Html.LabelFor(model => model.Event.ContactFirstName)

                    @Html.EditorFor(model => model.Event.ContactFirstName, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.Event.ContactFirstName, "", new { @class = "text-danger" })

                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.Event.ContactLastName)

                    @Html.EditorFor(model => model.Event.ContactLastName, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.Event.ContactLastName, "", new { @class = "text-danger" })

                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.Event.ContactPhoneNumber)

                    @Html.EditorFor(model => model.Event.ContactPhoneNumber, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.Event.ContactPhoneNumber, "", new { @class = "text-danger" })

                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.Event.ContactEmail)

                    @Html.EditorFor(model => model.Event.ContactEmail, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.Event.ContactEmail, "", new { @class = "text-danger" })

                </div>
                @Html.HiddenFor(m => m.EventDay.Id)
                @Html.HiddenFor(m => m.Event.Id)
                @Html.HiddenFor(m => m.EventStatuses)
                @Html.AntiForgeryToken()
                <div class="text-center">
                    <button type="submit" class="btn btn-primary btn-form">Schedule Event</button>
                </div>


            </div>

        </div>

    }
</div>
<div class="col-8 offset-3">
    @Html.ActionLink("VIEW ALL EVENTS", "ViewEvents", "Home", null, new { @class = "btn btn-info nav-back" })
    @Html.ActionLink("HOME", "Index", "Home", null, new { @class = "btn btn-info nav-back" })
    <button class="btn btn-info nav-back" onclick="goBack()">&lt--- BACK</button>
</div>
@section Scripts {
    @{await Html.RenderPartialAsync("_ValidationScriptsPartial");}
}
